/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/combatant.js":
/*!**************************!*\
  !*** ./src/combatant.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Combatant)\n/* harmony export */ });\nclass Combatant {\n    constructor() {\n        this.animationState = \"idle\"\n        this.animations = [];\n        this.animationQueue = []\n        this.animationTripper = -1\n        this.attack = 0\n        this.block = 0\n        this.aniPlaying = false\n        this.aniCheckQueue = []\n    }\n\n    animationFramesSetter() {\n        this.animationStates.forEach((spriteState) => {\n            let frames = {\n                loc: [],\n                src: spriteState.src\n            }\n            for (let j = 0; j < spriteState.frames; j++) {\n                let positionX = j * this.spriteWidth;\n                let positionY = 0;\n                frames.loc.push({ x: positionX, y: positionY });\n            }\n            this.animations[spriteState.name] = frames;\n        });\n    }\n\n    draw(ctx, gameFrame, staggerFrames, heightOffset) {\n        let rawPosition = (gameFrame / staggerFrames) % this.animations[this.animationState].loc.length\n        let position = Math.floor(rawPosition)\n\n        if (this.animationState !== \"dead\") {\n            if (this.animationState !== \"idle\") {\n                this.aniCheckQueue.push(position)\n                let unique = this.aniCheckQueue.filter((value, index, self) => { return self.indexOf(value) === index })\n                if (unique.length > 1 && this.aniCheckQueue.at(-1) === 0 && this.animationState !== \"idle\") {\n                    this.animationQueueSetter()\n                    this.aniCheckQueue = []\n                }\n            \n            }\n            if (this.animationQueue.length > 0 && this.animationState === \"idle\") {\n                this.animationQueueSetter()\n                position = 0\n            }\n        }   \n\n        let frameX = this.spriteWidth * position;\n        let frameY = this.animations[this.animationState].loc[position].y\n        ctx.drawImage(this.image, frameX, frameY, this.spriteWidth, this.spriteHeight, this.xPosition, this.yPosition - heightOffset, Math.floor(this.spriteWidth * this.sizeCoef), Math.floor(this.spriteHeight * this.sizeCoef))\n    }\n\n    heal(healVal) {\n        if (this.health + healVal > this.maxHealth) {\n            this.health = this.maxHealth\n        } else {\n            this.health += healVal\n        }\n    }\n\n    animationQueueSetter() {\n        if (this.animationQueue.length === 0) {\n            this.animation(\"idle\")\n        } else {\n            let aniStateName = this.animationQueue.shift()\n            this.animation(aniStateName)\n        } \n    }\n\n    framesFinder(aniStateName) {\n        for (let i in this.animationStates) {\n            let frameObj = this.animationStates[i]\n            if (frameObj[\"name\"] === aniStateName) return frameObj[\"frames\"]\n        }\n    }\n\n    animation = function(aniStateName) {\n        this.animationState = aniStateName\n        this.image.src = this.animations[aniStateName].src\n    }\n\n}\n\nCombatant.prototype.runForwards = function () {\n    this.xPosition += 1.12\n    this.yPosition = 400\n}\n\n\n//# sourceURL=webpack://jsproj/./src/combatant.js?");

/***/ }),

/***/ "./src/crowd.js":
/*!**********************!*\
  !*** ./src/crowd.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Crowd)\n/* harmony export */ });\nclass Crowd {\n    constructor(heightOffset) {\n        this.heightOffset = heightOffset\n        this.leftImg = new Image()\n        this.leftImg.src = 'art/crowd_left.png'\n        this.rightImg = new Image()\n        this.rightImg.src = 'art/crowd_right.png'\n        this.crowdArray = []\n        this.excitement = 75\n        this.populateSection()\n        this.updateYImmediate(heightOffset)\n        this.calmDown() \n    }\n\n    sectionBoundaries() {\n        return { \n            farLeft: {\n                xLow: 0,\n                xHigh: 120,\n                yLow: 350,\n                yHigh: 415,\n                spectArr: [],\n                img: this.rightImg,\n                size: 38,\n                pop: 10\n            },\n            midLeft: {\n                xLow: 240,\n                xHigh: 400,\n                yLow: 360,\n                yHigh: 400,\n                spectArr: [],\n                img: this.rightImg,\n                size: 38,\n                pop: 10\n            },\n            midRight: {\n                xLow: 500,\n                xHigh: 680,\n                yLow: 360,\n                yHigh: 400,\n                spectArr: [],\n                img: this.leftImg,\n                size: 38,\n                pop: 10\n            },\n            farRight: {\n                xLow: 780,\n                xHigh: 900,\n                yLow: 350,\n                yHigh: 415,\n                spectArr: [],\n                img: this.leftImg,\n                size: 38,\n                pop: 10\n            },\n            midRightBalc: {\n                xLow: 500,\n                xHigh: 660,\n                yLow: 275,\n                yHigh: 300,\n                spectArr: [],\n                img: this.leftImg,\n                size: 25,\n                pop: 15\n            },\n            midleftBalc: {\n                xLow: 300,\n                xHigh: 490,\n                yLow: 275,\n                yHigh: 300,\n                spectArr: [],\n                img: this.rightImg,\n                size: 25,\n                pop: 15\n            },\n            farleftBalc: {\n                xLow: 10,\n                xHigh: 300,\n                yLow: 260,\n                yHigh: 278,\n                spectArr: [],\n                img: this.rightImg,\n                size: 25,\n                pop: 15\n            },\n            farrightBalc: {\n                xLow: 600,\n                xHigh: 900,\n                yLow: 260,\n                yHigh: 278,\n                spectArr: [],\n                img: this.leftImg,\n                size: 25,\n                pop: 15\n            },\n            midrightNosebleed: {\n                xLow: 400,\n                xHigh: 700,\n                yLow: 185,\n                yHigh: 200,\n                spectArr: [],\n                img: this.leftImg,\n                size: 18,\n                pop: 20\n            }, \n            midleftNosebleed: {\n                xLow: 200,\n                xHigh: 500,\n                yLow: 185,\n                yHigh: 200,\n                spectArr: [],\n                img: this.rightImg,\n                size: 18,\n                pop: 20\n            }, \n            farleftNosebleed: {\n                xLow: 100,\n                xHigh: 400,\n                yLow: 170,\n                yHigh: 180,\n                spectArr: [],\n                img: this.rightImg,\n                size: 18,\n                pop: 12\n            },\n            farrightNosebleed: {\n                xLow: 500,\n                xHigh: 800,\n                yLow: 170,\n                yHigh: 180,\n                spectArr: [],\n                img: this.leftImg,\n                size: 18,\n                pop: 12\n            }, \n\n            \n        }\n\n    }\n\n    populateSection() {\n        let allSections = this.sectionBoundaries()\n        for (let sectionName in allSections) {\n            let section = allSections[sectionName]\n            let xRange = section[\"xHigh\"] - section[\"xLow\"]\n            let yRange = section[\"yHigh\"] - section[\"yLow\"]\n            for (let i = 0; i <= section[\"pop\"]; i++) {\n                let dude = { img: section[\"img\"] }\n                let yStart = Math.floor(Math.random() * yRange) + section[\"yLow\"]\n                dude[\"yRender\"] = yStart\n                dude[\"yCore\"] = yStart\n                dude[\"xRender\"] = Math.floor(Math.random() * xRange) + section[\"xLow\"]\n                dude[\"sizeX\"] = Math.floor(Math.random() * 10) + section[\"size\"]\n                dude[\"sizeY\"] = Math.floor(Math.random() * 10) + section[\"size\"]\n                section[\"spectArr\"].push(dude)\n            }\n            section[\"spectArr\"].sort((a, b) => { return a[\"posY\"] - b[\"posY\"]})\n            this.crowdArray.push(section)\n        }\n      }\n\n    jostle() {\n        for (let i = 0; i < this.crowdArray.length; i++) {\t\n            let section = this.crowdArray[i][\"spectArr\"]\n            let sectionRules = this.crowdArray[i]\n            let xHigh = sectionRules[\"xHigh\"]\n            let xLow = sectionRules[\"xLow\"]\n            let yHigh = sectionRules[\"yHigh\"]\n            let yLow = sectionRules[\"yLow\"]\n\n            for (let j = 0; j < section.length; j++) {\t\n                let yStagger = Math.floor(Math.random() * this.excitement)\n                let xStagger = Math.floor(Math.random() * (this.excitement + 10))\n                if (yStagger === 0) {\n                    let spectator = section[j]\n                    \n                        spectator[\"yCore\"] += Math.floor(Math.random() * 3) - 1\n                        if (xStagger === 0) spectator[\"xRender\"] += Math.floor(Math.random() * 3) - 1\n                        if (spectator[\"yCore\"] > sectionRules[\"yHigh\"]) {\n                            spectator[\"yCore\"] = yHigh\n                        } \n                        if (spectator[\"yCore\"] < sectionRules[\"yLow\"]) {\n                            spectator[\"yCore\"] = yLow\n                        }\n                        if (spectator[\"xRender\"] > sectionRules[\"xHigh\"]) {\n                            spectator[\"xRender\"] = xHigh\n                        }\n                    if (spectator[\"xRender\"] < sectionRules[\"xLow\"]) {\n                        spectator[\"xRender\"] = xLow\n                        }\n        \n                        \n                    }\n            }\n            section.sort((a, b) => { return a[\"posY\"] - b[\"posY\"] })\n\n       } \n    }\n\n    calmDown() {\n        setInterval(()=>{\n            if (this.excitement < 75) this.excitement += 1\n        }, 2000)\n    }\n\n    excite(num) {\n        this.excitement = num\n    }\n\n\n    hush() {\n        this.excitement = 75\n    }\n\n    updateYImmediate(heightOffset) {\n        for (let i = 0; i < this.crowdArray.length; i++) {\n            let section = this.crowdArray[i][\"spectArr\"]\n\n            for (let j = 0; j < section.length; j++) {\n                let spectator = section[j]\n                spectator[\"yRender\"] = spectator[\"yCore\"] - heightOffset\n                spectator[\"yRender\"] = spectator[\"yCore\"] - heightOffset\n            }\n            section.sort((a, b) => { return a[\"yRender\"] - b[\"yRender\"] })\n\n        } \n    }\n\n\n\n}\n\n//# sourceURL=webpack://jsproj/./src/crowd.js?");

/***/ }),

/***/ "./src/deck.js":
/*!*********************!*\
  !*** ./src/deck.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Deck)\n/* harmony export */ });\nclass Deck {\r\n    constructor(combatant, decksize) { \r\n        this.combatant = combatant\r\n        this.stack = []\r\n        this.allUniqueCards = {}\r\n        this.deckMaker(decksize)\r\n        this.graveyard = 0\r\n\r\n        this.fullDeck = new Image()\r\n        this.fullDeck.src = \"art/deck/full_deck.png\"\r\n\r\n        this.halfDeck = new Image()\r\n        this.halfDeck.src = \"art/deck/half_deck.png\"\r\n\r\n        this.emptyDeck = new Image()\r\n        this.emptyDeck.src = \"art/deck/empty_deck.png\"\r\n    }\r\n\r\n\r\n    deckMaker(decksize) {\r\n        let infiniteDeck;\r\n        let cardStats;\r\n        if (this.combatant.constructor.name === \"Knight\") {\r\n            cardStats = this.playerCards(this.combatant)\r\n            infiniteDeck = false\r\n        } else {\r\n            cardStats = this.opponentCards(this.combatant)\r\n            infiniteDeck = true\r\n        }\r\n        let allCardNames = Object.keys(cardStats)\r\n\r\n        for (let i = 0; i < allCardNames.length; i++) {\r\n            let card = cardStats[allCardNames[i]]\r\n            let img = new Image()\r\n            img.src = card.src\r\n            card.art = img\r\n            this.allUniqueCards[allCardNames[i]] = card\r\n        }\r\n\r\n        for (let i = 0; i < decksize; i++) {\r\n            let card;\r\n            if (infiniteDeck) {\r\n                let allUniqueCardkeys = Object.keys(this.allUniqueCards)\r\n                card = this.allUniqueCards[allUniqueCardkeys[allUniqueCardkeys.length * Math.random() << 0]]\r\n            } else {\r\n                card = this.allUniqueCards[allCardNames[i]]\r\n            }\r\n            this.stack.push(card)\r\n        }\r\n\r\n        if (!infiniteDeck) {\r\n            this.shuffleDeck()\r\n        } else {\r\n            this.pruneDeck()\r\n        }\r\n    }\r\n\r\n    pruneDeck() {\r\n        let resetStack = []\r\n        let bF = this.allUniqueCards[\"blindingFlash\"]\r\n        let gP = this.allUniqueCards[\"groundPound\"]\r\n        let interval;\r\n\r\n        for (let i = 0; i < this.stack.length - 3; i++) {\t\r\n            let card = this.stack[i]\r\n            if (interval && card === bF) {\r\n                interval--\r\n                continue\r\n            } else {\r\n                if (card === bF) interval = 3\r\n                resetStack.push(card)\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < resetStack.length - 3; i++) {\r\n            let card = resetStack[i]\r\n            if (interval && card === gP) {\r\n                interval--\r\n                continue\r\n            } else {\r\n                if (card === gP) interval = 3\r\n                this.stack.unshift(card)\r\n            }\r\n        }\r\n    }\r\n\r\n    shuffleDeck() {\r\n        for (let i = this.stack.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = this.stack[i];\r\n            this.stack[i] = this.stack[j];\r\n            this.stack[j] = temp;\r\n        }\r\n    }\r\n\r\n    playerCards(knight) {\r\n        \r\n        return {\r\n            strike: {\r\n                id: \"strike\",\r\n                attack: function() { return 4 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/strike.png\",\r\n                animation: \"attack\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            defend: {\r\n                id: \"defend\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 5 },\r\n                src: \"art/knight_cards/defend.png\",\r\n                animation: \"attack2\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            reposition: {\r\n                id: \"reposition\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 2 },\r\n                src: \"art/knight_cards/reposition.png\",\r\n                animation: \"duck\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.numCardsDraw += 1 \r\n                } // draw a card\r\n            },\r\n\r\n            taunt: {\r\n                id: \"taunt\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 4 },\r\n                src: \"art/knight_cards/taunt.png\",\r\n                animation: \"duck\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.opponent.nextMove[1] = this.opponent.allUniqueCards[\"strike\"]\r\n                } // your opponent must use strike next turn\r\n            },\r\n\r\n            parry: {\r\n                id: \"parry\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/parry.png\",\r\n                animation: \"combo\",\r\n                instantEffects: function (playedCard, opponentCard) {\r\n                if (opponentCard.attack) {\r\n                    opponentCard.attack = function () { return 0 }\r\n                    this.opponent.health -= 4\r\n                }\r\n                 },\r\n                delayedEffects: function () { \r\n                    this.numCardsDraw += 1 \r\n                } // If your opponent attacks this turn, you negate the attack and they take 4 damage.\r\n            },\r\n\r\n            shieldOfFaith: {\r\n                id: \"shieldOfFaith\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 5 },\r\n                src: \"art/knight_cards/shield_of_faith.png\",\r\n                animation: \"attack2\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.knight.status[\"damageImmune\"] = true\r\n                    this.knight.status[\"ttdamageImmune\"] = 1\r\n                } //You take no damage next turn\r\n            },\r\n\r\n            dodge: {\r\n                id: \"dodge\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/dodge.png\",\r\n                animation:  \"roll\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    if (this.opponent.attack > this.knight.block) this.knight.health += (this.opponent.attack - this.knight.block)\r\n                } //You take no damage this turn\r\n            },\r\n\r\n            secondWind: {\r\n                id: \"secondWind\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 8 },\r\n                src: \"art/knight_cards/second_wind.png\",\r\n                animation: \"duck\",\r\n                instantEffects: function () { \r\n                    this.knight.heal(8)\r\n                },\r\n                delayedEffects: function () { \r\n                    this.numCardsDraw += 1 \r\n                } //recover 8 health, draw a card\r\n            },\r\n\r\n            feint: {\r\n                id: \"feint\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/feint.png\",\r\n                animation: \"crouchAttack\",\r\n                instantEffects: function () { \r\n                    this.opponent.nextMove[0] = this.opponent.allUniqueCards[\"turtle\"]\r\n                },\r\n                delayedEffects: function () { } //Instead of their action, your opponent turtles this turn.\r\n            },\r\n\r\n            revengeance: {\r\n                id: \"revengeance\",\r\n                attack: function () { return this.knight.deckObj.graveyard * 2 }, // deal damage equal to double the num of cards in discard\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/revengeance.png\",\r\n                animation: \"combo\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            mightyBlow: {\r\n                id: \"mightyBlow\",\r\n                attack: function () { return 8 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/mighty_blow.png\",\r\n                animation: \"combo\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            forHonor: {\r\n                id: \"forHonor\",\r\n                attack: function () { return 3 },\r\n                block: function () { return 5 },\r\n                src: \"art/knight_cards/for_honor.png\",\r\n                animation: \"attack\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.numCardsDraw += 1 \r\n                } //draws a card\r\n            },\r\n\r\n            poiseBreak: {\r\n                id: \"poiseBreak\",\r\n                attack: function () { return 4 },\r\n                block: function () { return 0 },\r\n                src: \"art/knight_cards/poise_break.png\",\r\n                animation: \"crouchAttack\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.knight.status[\"opponentPoiseBroken\"] = true\r\n                    this.knight.status[\"ttopponentPoiseBroken\"] = 1\r\n                } // your opponent takes double damage next turn\r\n            },\r\n\r\n            holdTheLine: {\r\n                id: \"holdTheLine\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 10 },\r\n                src: \"art/knight_cards/hold_the_line.png\",\r\n                animation: \"attack2\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    opponentCards(opponent) {\r\n        return {\r\n\r\n            strike: {\r\n                id: \"strike\",\r\n                attack: function () { return 6 },\r\n                block: function () { return 0 },\r\n                src: \"art/opponent_cards/mstrike.png\",\r\n                animation: \"attack\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            rockThrow: {\r\n                id: \"rockThrow\",\r\n                attack: function () { return 8 },\r\n                block: function () { return 6 },\r\n                src: \"art/opponent_cards/mrock_throw.png\",\r\n                animation: \"attack\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            spikes: {\r\n                id: \"spikes\",\r\n                attack: function () { return 12 },\r\n                block: function () { return 0 },\r\n                src: \"art/opponent_cards/mspikes.png\",\r\n                animation: \"attack2\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            blindingFlash: {\r\n                id: \"blindingFlash\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 0 },\r\n                src: \"art/opponent_cards/mblinding_flash.png\",\r\n                animation: \"flash\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    this.knight.status[\"blinded\"] = true\r\n                    this.knight.status[\"ttblinded\"] = 2\r\n                } //You cannot see your opponent’s moves for the next two turns\r\n            },\r\n\r\n            turtle: {\r\n                id: \"turtle\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 4 },\r\n                src: \"art/opponent_cards/mturtle.png\",\r\n                animation: \"idle\",\r\n                instantEffects: function () { \r\n                    this.opponent.heal(4)\r\n                },\r\n                delayedEffects: function () { }\r\n            },\r\n\r\n            groundPound: {\r\n                id: \"groundPound\",\r\n                attack: function () { return 0 },\r\n                block: function () { return 0 },\r\n                src: \"art/opponent_cards/mground_pound.png\",\r\n                animation: \"attack3\",\r\n                instantEffects: function () { },\r\n                delayedEffects: function () { \r\n                    let cardSlots = document.querySelectorAll(\".card-slot\")\r\n                    let filledSlots = this.cardSlotCollector(\"filled\")\r\n\r\n                    if (filledSlots.length) {\r\n                        for (let i = 1; i === 1 && filledSlots.length > 0; i++) {\r\n                            let index = Math.floor(Math.random() * (filledSlots.length));\r\n                            let slotId = filledSlots.splice(index,1)\r\n                            this.clearCardFromSlot(slotId)\r\n                            this.knight.deckObj.graveyard--\r\n                        }\r\n                    }\r\n                } //Destroy a card in player’s hand.\r\n            }\r\n        }\r\n    }   \r\n    thinDeck() {\r\n        let deckSlot = document.getElementById(\"deck-slot\")\r\n        if (this.deck.length === 0) {\r\n            deckSlot.innerHTML = '<img src=\"art/deck/rune.png\" id=\"deckArt\" width=\"160px\" height=\"260px\"/>'\r\n        } else if (this.deck.length < 3) {\r\n            deckSlot.innerHTML = '<img src=\"' + this.deckObj.emptyDeck.src + '\" id=\"deckArt\" width=\"140px\" height=\"200px\"/>'\r\n        } else if (this.deck.length < 6) {\r\n            deckSlot.innerHTML = '<img src=\"' + this.deckObj.halfDeck.src + '\" id=\"deckArt\" width=\"140px\" height=\"200px\"/>'\r\n        }\r\n    }  \r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://jsproj/./src/deck.js?");

/***/ }),

/***/ "./src/dummy.js":
/*!**********************!*\
  !*** ./src/dummy.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Dummy)\n/* harmony export */ });\n/* harmony import */ var _combatant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combatant.js */ \"./src/combatant.js\");\n\n\nclass Dummy extends _combatant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(spriteWidth, spriteHeight, xPosition, yPosition, sizeCoef) {\n        super()\n\n        this.image = new Image()\n        this.image.src = 'art/knight1/_aIdle.png'\n        this.animationState = \"knightIdle\"\n        this.spriteWidth = spriteWidth;\n        this.spriteHeight = spriteHeight;\n        this.xPosition = xPosition\n        this.yPosition = yPosition\n        this.sizeCoef = sizeCoef\n        this.smash = false\n\n        this.animationStates = [\n            { name: \"knightIdle\", frames: 9, src: 'art/knight1/_aIdle.png' },\n            { name: \"knightTIdle\", frames: 9, src: 'art/knight1/_aIdleTurned.png' },\n            { name: \"knightDeath\", frames: 10, src: 'art/knight1/_aDeath.png' },\n            { name: \"knightRun\", frames: 10, src: 'art/knight1/_aRun.png' },\n            { name: \"knighTurn\", frames: 2, src: 'art/knight1/_aTurnAround.png' },\n            { name: \"demonLeap\", frames: 1, src: 'art/demon/_Leap.png' },\n            { name: \"demonSmash\", frames: 1, src: 'art/demon/_Smash.png' },\n            { name: \"demonIdle\", frames: 6, src: 'art/demon/_Idle.png' },\n        ];\n\n        this.animationFramesSetter()\n\n    }\n\n    draw(ctx, gameFrame, staggerFrames, heightOffset) {\n        let rawPosition = (gameFrame / staggerFrames) % this.animations[this.animationState].loc.length\n        let position = Math.floor(rawPosition)\n        let frameX = this.spriteWidth * position;\n        let frameY = this.animations[this.animationState].loc[position].y\n        ctx.drawImage(this.image, frameX, frameY, this.spriteWidth, this.spriteHeight, this.xPosition, this.yPosition - heightOffset, Math.floor(this.spriteWidth * this.sizeCoef), Math.floor(this.spriteHeight * this.sizeCoef))\n    }\n\n    leap(){\n        if (this.xPosition > 300) {\n            this.xPosition -= 8\n            this.yPosition += 8\n        } else {\n            this.xPosition = 300\n            this.yPosition = 319\n            this.smash = true\n        }\n\n    }\n}\n\n\n//# sourceURL=webpack://jsproj/./src/dummy.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _knight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./knight.js */ \"./src/knight.js\");\n/* harmony import */ var _opponent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./opponent.js */ \"./src/opponent.js\");\n\r\n\r\n\r\nclass Game {\r\n    constructor(crowd) { \r\n        this.knight = new _knight_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()\r\n        this.opponent = new _opponent_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]()\r\n        this.crowd = crowd\r\n        \r\n        this.numCardsDraw = 0\r\n        this.gameOver = false\r\n        this.gameWin = false\r\n        this.gameLoss = false\r\n        this.cardLoss = false\r\n    }\r\n        \r\n    setupMat() {\r\n        let deckSlot = document.getElementById(\"deck-slot\")\r\n        deckSlot.innerHTML += '<img src=\"' + this.knight.deckObj.fullDeck.src + '\" id=\"deckArt\" width=\"140px\" height=\"200px\"/>'\r\n        \r\n        let deck = this.knight.deck\r\n        for (let i = 1; i <= 5; i++) {\t\r\n            let card = deck[i - 1]\r\n            let slotId = \"card-slot\" + i\r\n            let slot = document.getElementById(slotId)\r\n            slot.innerHTML += '<img src=\"' + card.src + '\" id=\"' + card.id + '\" class=\"card\" + \" width=\"280px\" height=\"280px\"/>';\r\n        }\r\n\r\n        this.knight.deck = deck.slice(5, deck.length)\r\n    }\r\n\r\n    coreGameLoop(playerCardId, slotId) {\r\n        this.clearCardFromSlot(slotId)\r\n\r\n        let playedCard = this.knight.allUniqueCards[playerCardId]\r\n        let opponentCard = this.opponent.nextMove[0]\r\n\r\n        this.instantCardEffects(playedCard, opponentCard)\r\n\r\n        this.knight.attack = this.knight.statusChecker.call(this.knight, playedCard.attack.call(this), \"attack\")\r\n        this.knight.block = playedCard.block.call(this)\r\n\r\n        this.opponent.attack = opponentCard.attack.call(this)\r\n        this.opponent.block = opponentCard.block.call(this)\r\n\r\n        this.damageCalc()\r\n        \r\n        this.resolveStatusEffects.call(this.knight, this.knight)\r\n        this.resolveStatusEffects.call(this.opponent, this.opponent)\r\n        \r\n        this.delayedCardEffects(playedCard, opponentCard)\r\n\r\n        this.knight.animationQueue.push(playedCard.animation)\r\n        this.opponent.animationQueue.push(opponentCard.animation)\r\n\r\n        this.gameEndCheck()\r\n        this.crowd.excite(0)\r\n        setTimeout(() => {\r\n            this.drawCards()\r\n            this.knight.deckObj.thinDeck.call(this.knight)\r\n            this.opponent.nextMove.shift()\r\n            this.knight.attack = 0\r\n            this.knight.block = 0\r\n            this.opponent.attack = this.opponent.nextMove[0].attack.call(this)\r\n            this.opponent.block = this.opponent.nextMove[0].block.call(this)\r\n        },1100) //should match the pause interval in indexlisteners\r\n    }\r\n\r\n    gameEndCheck() {\r\n        let i = 0\r\n        while (i === 0) {\r\n            i++\r\n            if (this.knight.health < 1) this.gameLoss = true\r\n            if (this.opponent.health < 1) {\r\n                this.gameWin = true; \r\n                break;\r\n            }\r\n            let emptySlots = this.cardSlotCollector(\"empty\")\r\n            if (emptySlots.length === 5 && this.numCardsDraw === 0) {\r\n                this.gameLoss = true\r\n                this.cardLoss = true\r\n            }\r\n        }\r\n    }\r\n\r\n    damageCalc(){\r\n\r\n        if (this.opponent.attack > this.knight.block && !this.knight.status.damageImmune) {\r\n            this.knight.health -= (this.opponent.attack - this.knight.block)\r\n        }\r\n        if (this.knight.attack > this.opponent.block) {\r\n            this.opponent.health -= (this.knight.attack - this.opponent.block)\r\n            this.numCardsDraw += 1\r\n        }\r\n    }\r\n\r\n    resolveStatusEffects() {\r\n        let statuses = Object.keys(this.status)\r\n        for (let i = 0; i < statuses.length; i++) {\t\r\n            let statusTimerKey = statuses[i]\r\n\r\n            if (statusTimerKey.slice(0, 2) === \"tt\" && this.status[statusTimerKey] > 0) {\r\n                let actualStatusKey = statusTimerKey.slice(2)\r\n                this.status[statusTimerKey] -= 1\r\n                if (this.status[statusTimerKey] === 0) {\r\n                    this.status[actualStatusKey] = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    instantCardEffects(playedCard, opponentCard) {\r\n        playedCard.instantEffects.call(this, playedCard, opponentCard)\r\n        opponentCard.instantEffects.call(this, playedCard, opponentCard)\r\n    }\r\n\r\n    delayedCardEffects(playedCard, opponentCard) {\r\n        playedCard.delayedEffects.call(this, playedCard, opponentCard)\r\n        opponentCard.delayedEffects.call(this, playedCard, opponentCard)\r\n    }\r\n\r\n    clearCardFromSlot(slotId){\r\n        let slot = document.getElementById(slotId)\r\n        slot.innerHTML = \"\"\r\n        this.knight.deckObj.graveyard++\r\n    }\r\n\r\n    addCardtoSlot(slotId) {\r\n        let slot = document.getElementById(slotId)\r\n        if (this.knight.deck.length > 0) {\r\n            let card = this.knight.deck.shift()\r\n            slot.innerHTML += '<img src=\"' + card.src + '\" id=\"' + card.id + '\" class=\"card\" width=\"280px\" height=\"280px\"/>';\r\n        }\r\n    }\r\n\r\n    drawCards() {\r\n        let emptySlots = this.cardSlotCollector(\"empty\")\r\n        for (let i = emptySlots.length - 1; i >= 0 && this.numCardsDraw > 0; this.numCardsDraw--) {\t\r\n            let slotId = emptySlots[Math.abs(i - (emptySlots.length - 1))]\r\n            this.addCardtoSlot(slotId) \r\n            i--\r\n        }\r\n\r\n        this.numCardsDraw = 0\r\n    }\r\n\r\n    cardSlotCollector(filledOrEmpty) {\r\n        let cardSlots = document.querySelectorAll(\".card-slot\")\r\n        let slots = []\r\n        for (let i = 0; i < cardSlots.length; i++) {\r\n            let cardslot = cardSlots[i];\r\n            if (filledOrEmpty === \"empty\") {\r\n                if (!cardslot.firstChild) slots.push(cardslot.id)\r\n            } else {\r\n                if (cardslot.firstChild) slots.push(cardslot.id)\r\n            }\r\n        }\r\n        return slots\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://jsproj/./src/game.js?");

/***/ }),

/***/ "./src/gameView.js":
/*!*************************!*\
  !*** ./src/gameView.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameView)\n/* harmony export */ });\n/* harmony import */ var _game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n/* harmony import */ var _crowd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crowd.js */ \"./src/crowd.js\");\n/* harmony import */ var _tutorial_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tutorial.js */ \"./src/tutorial.js\");\n/* harmony import */ var _dummy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dummy.js */ \"./src/dummy.js\");\n\r\n\r\n\r\n\r\n\r\nclass GameView {\r\n    constructor(canvas, clientHeight) { \r\n        this.canvas = canvas\r\n        this.ctx = this.canvas.getContext('2d')\r\n        this.pauseInputs = false\r\n\r\n        this.crowd = new _crowd_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]()\r\n        this.crowdArray = this.crowd.crowdArray\r\n\r\n        this.MAX_HEIGHT = 708\r\n        this.MIN_HEIGHT = 578\r\n        \r\n        this.CANVAS_WIDTH = this.canvas.width = 950\r\n        this.setHeight(clientHeight)\r\n        \r\n        this.infoDimensions = { infoSquareYOffset: 200, infoSquareXOffset: 274, infoSquareLen: 200, infoSquareHeight: 400 } \r\n        \r\n        this.backgroundImage = new Image()\r\n        this.backgroundImage.src = 'art/arena.jpg'\r\n        \r\n        this.matImage = new Image()\r\n        this.matImage.src = 'art/mat.png'\r\n        \r\n        this.lossText = new Image()\r\n        this.lossText.src = 'art/youded.png'\r\n        \r\n        this.winText = new Image()\r\n        this.winText.src = 'art/youwin.png'\r\n        \r\n        this.gameStart = false\r\n        this.tutorialStart = false\r\n        this.playIntroAnimation = false\r\n        this.gameFrame = 0;\r\n        this.staggerFrames = 10;\r\n        \r\n        this.hoveredCard = null\r\n        this.showNextHover = true\r\n        this.showDeckLength = false\r\n        \r\n        this.fadeOut = 0\r\n        this.textFadeIn = 1\r\n        \r\n        this.game = new _game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.crowd)\r\n        this.knight = this.game.knight\r\n        this.opponent = this.game.opponent\r\n        this.dummy = new _dummy_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](120, 80, 310, 358, 4)\r\n        this.demonDummy = new _dummy_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](500, 400, 919, -300, 1)\r\n\r\n        this.demonDummy.animationState = \"demonLeap\"\r\n        this.demonDummy.image.src = this.dummy.animations[\"demonLeap\"].src\r\n\r\n        this.tutorial = new _tutorial_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.game, this.ctx, this.heightOffset)\r\n        this.titleCard()\r\n        this.introAnimationSeq = 1\r\n\r\n        this.shaking = false\r\n        this.shakeX = 0\r\n        this.shakeY = 0\r\n    }\r\n\r\n    shakeBackground(){\r\n        this.shaking = true\r\n        this.shakeX = Math.floor(Math.random() * 5) - 20\r\n        this.shakeY = Math.floor(Math.random() * 5) - 40\r\n        this.crowd.excite(0)\r\n    }\r\n\r\n    calmBackground() {\r\n        if (this.shaking === true) {\r\n            this.shakeX = 0\r\n            this.shakeY = 0\r\n            this.shaking = false\r\n        }\r\n    }\r\n\r\n    renderIntroAnimation() {\r\n        if (this.introAnimationSeq < 9) {\r\n            this.knight.draw(this.ctx, this.gameFrame, this.staggerFrames, this.heightOffset)\r\n            this.dummy.draw(this.ctx, this.gameFrame, this.staggerFrames, this.heightOffset)\r\n            if (this.introAnimationSeq >= 6) this.demonDummy.draw(this.ctx, this.gameFrame, this.staggerFrames, this.heightOffset)\r\n            console.log(this.introAnimationSeq);\r\n            if (this.introAnimationSeq === 1) {\r\n                if (this.crowd.excitement >= 75) this.crowd.excite(5)\r\n                if (this.knight.xPosition < 200) {\r\n                    this.knight.runForwards()\r\n                    if (this.knight.animationState === \"idle\"){\r\n                        this.knight.animationQueue.push(\"run\")\r\n                    }\r\n                }  else {\r\n                    this.knight.animationQueue = []\r\n                    this.knight.animationState = \"idle\"\r\n                    this.knight.image.src = this.knight.animations[\"idle\"].src\r\n                    setTimeout(()=>{\r\n                        this.dummy.animationState = \"knightTIdle\"\r\n                        this.dummy.image.src = this.dummy.animations[\"knightTIdle\"].src\r\n                        this.introAnimationSeq = 2\r\n                    },1000)\r\n                }        \r\n            } else if (this.introAnimationSeq === 2) {\r\n                this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\r\n                this.ctx.fillRect(400, 418, 330, 45)\r\n                this.ctx.fillStyle = 'rgba(0,0,0,1)';\r\n                this.ctx.font = \"26px optima, sans-serif \"\r\n                this.ctx.fillText(\"You ready to die today, kid?\", 410, 450, 2000, 200)\r\n                setTimeout(() => {\r\n                    this.introAnimationSeq = 3\r\n                }, 3000)\r\n            } else if (this.introAnimationSeq === 3) {\r\n                this.shakeBackground()\r\n                setTimeout(() => {\r\n                    this.calmBackground()\r\n                    this.introAnimationSeq = 4\r\n                }, 3000)\r\n            } else if (this.introAnimationSeq === 4) {\r\n                    this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\r\n                    this.ctx.fillRect(430, 418, 281, 45)\r\n                    this.ctx.fillStyle = 'rgba(0,0,0,1)';\r\n                    this.ctx.font = \"26px optima, sans-serif \"\r\n                    this.ctx.fillText(\"What the hell was that?\", 440, 450, 2000, 260)\r\n                    setTimeout(() => {\r\n                        this.introAnimationSeq = 5\r\n                    }, 3000)\r\n            } else if (this.introAnimationSeq === 5) {\r\n                this.shakeBackground()\r\n                setTimeout(() => {\r\n                    this.calmBackground()\r\n                    if (this.introAnimationSeq === 5) this.introAnimationSeq = 6\r\n                }, 3000)\r\n            } else if (this.introAnimationSeq === 6) {\r\n                    this.knight.animationQueue.push(\"roll\")\r\n                    this.introAnimationSeq = 7\r\n            } else if (this.introAnimationSeq === 7) {\r\n                this.demonDummy.leap()\r\n                if (this.demonDummy.smash) {\r\n                    this.crowd.excite(0)\r\n                    this.demonDummy.animationState = \"demonSmash\"\r\n                    this.demonDummy.image.src = this.demonDummy.animations[\"demonSmash\"].src\r\n                    this.dummy.animationState = \"knightDeath\"\r\n                    this.dummy.image.src = this.dummy.animations[\"knightDeath\"].src\r\n                    this.shakeBackground()\r\n                    setTimeout(() => {\r\n                        this.introAnimationSeq = 8\r\n                    }, 300)\r\n                }\r\n            } else if (this.introAnimationSeq === 8) {\r\n                setTimeout(()=>{\r\n                    this.calmBackground()\r\n                },300)\r\n                this.gameStart = true\r\n                this.playIntroAnimation = false\r\n                this.introAnimationSeq = 9\r\n            }\r\n            this.gameFrame++\r\n        }   \r\n    }\r\n\r\n    titleCard() {\r\n        if (!this.gameStart && !this.tutorialStart && !this.playIntroAnimation) {\r\n            this.ctx.clearRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n            this.renderBackground()\r\n            this.renderCrowd()\r\n            this.renderStartOptions()\r\n            requestAnimationFrame(this.titleCard.bind(this))\r\n        } else if (this.tutorialStart) {\r\n            this.ctx.clearRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n            this.renderBackground()\r\n            this.renderCrowd()\r\n            this.tutorial.renderTutorial()\r\n            requestAnimationFrame(this.titleCard.bind(this))\r\n        } else if (this.playIntroAnimation) {\r\n            this.ctx.clearRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n            this.renderBackground()\r\n            this.renderCrowd()\r\n            this.renderIntroAnimation()\r\n            requestAnimationFrame(this.titleCard.bind(this))\r\n        } else if (this.gameStart) {\r\n            this.game.setupMat()\r\n            this.game.knight.xPosition = 200\r\n            this.animate()\r\n        }\r\n    }\r\n\r\n    renderStartOptions() {\r\n        this.ctx.fillStyle = 'rgba(0,0,0,.9)'\r\n        this.ctx.fillRect(-10, 130, 2000, 120)\r\n        this.ctx.fillRect(-10, 290, 2000, 70)\r\n        this.ctx.fillRect(-10, 390, 2000, 70)\r\n        this.ctx.fillStyle = 'rgba(255,87,51,0.35)'\r\n        this.ctx.fillRect(-10,145, 2000, 90)\r\n        this.ctx.fillRect(-10, 305, 2000, 40)\r\n        this.ctx.fillRect(-10, 405, 2000, 40)\r\n\r\n        this.ctx.fillStyle = \"crimson\"\r\n        this.ctx.font = \"130px trattatello, sans-serif \"\r\n        this.ctx.fillText(\"Demon Slayer\", 200, 225)\r\n        this.ctx.font = \"80px trattatello, sans-serif \"\r\n        this.ctx.fillText(\"start\", 260, 350)\r\n        this.ctx.fillText(\"tutorial\", 260, 450)\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(220, 340);\r\n        this.ctx.lineTo(245, 325);\r\n        this.ctx.lineTo(220, 310);\r\n        this.ctx.fill();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(220, 440);\r\n        this.ctx.lineTo(245, 425);\r\n        this.ctx.lineTo(220, 410);\r\n        this.ctx.fill();\r\n    }\r\n\r\n    renderCrowd() {\r\n\r\n        for (let i = 0; i < this.crowdArray.length; i++) {\r\n            let section = this.crowdArray[i][\"spectArr\"]\r\n            for (let j = 0; j < section.length; j++) {\t\r\n                let spectator = section[j]\r\n                this.ctx.drawImage(spectator[\"img\"], spectator[\"xRender\"], spectator[\"yRender\"], spectator[\"sizeX\"], spectator[\"sizeY\"])\r\n            }\r\n        }\r\n        this.crowd.jostle()\r\n        this.crowd.updateYImmediate(this.heightOffset)\r\n    }\r\n\r\n    animate() {\r\n        \r\n        this.ctx.clearRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n        this.renderBackground()\r\n        this.renderCrowd()\r\n        if (this.game.gameLoss || this.game.gameWin) this.renderGameEndScreen()\r\n        if (!this.game.gameOver) {\r\n            this.renderInfoSquares()\r\n            this.renderText()\r\n            if (this.hoveredCard && this.showNextHover) this.renderHoveredCard(this.hoveredCard)\r\n        }\r\n        this.renderCharacters()\r\n        this.endScreenAnimations()\r\n        this.gameFrame++\r\n\r\n\r\n        requestAnimationFrame(this.animate.bind(this))\r\n    }\r\n\r\n    renderBackground() {\r\n        this.ctx.drawImage(this.backgroundImage, 0, this.heightOffset + 60, 1024 + this.shakeY, this.CANVAS_HEIGHT + this.shakeX, 0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n    }\r\n\r\n    renderInfoSquares() {\r\n        this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\r\n        const opponentInfoSquare = this.ctx.fillRect((this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset), this.infoDimensions.infoSquareYOffset - this.heightOffset, this.infoDimensions.infoSquareLen, this.infoDimensions.infoSquareHeight)\r\n\r\n        let opponentMove;\r\n        if (this.knight.status[\"blinded\"]) {\r\n            opponentMove = this.opponent.blindedCard.art\r\n        } else {\r\n            opponentMove = this.opponent.nextMove[0].art\r\n        }\r\n        this.ctx.drawImage(opponentMove, (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 10, this.infoDimensions.infoSquareYOffset + 120 - this.heightOffset, 180, 280)\r\n\r\n        const playerInfoSquare = this.ctx.fillRect((this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen), this.infoDimensions.infoSquareYOffset - this.heightOffset, this.infoDimensions.infoSquareLen, this.infoDimensions.infoSquareHeight)\r\n    }\r\n\r\n    renderText() {\r\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\r\n        this.ctx.font = \"26px optima, sans-serif \"\r\n        this.ctx.fillText(\"Monster Health\", (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 14, this.infoDimensions.infoSquareYOffset + 40 - this.heightOffset)\r\n\r\n        if (this.knight.status[\"blinded\"]) {\r\n            this.ctx.fillText(\"Atk: ? Blk: ? \", (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 30, this.infoDimensions.infoSquareYOffset + 110 - this.heightOffset)\r\n            this.ctx.fillText(\"?\", (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 90, this.infoDimensions.infoSquareYOffset + 75 - this.heightOffset)\r\n        } else {\r\n            this.ctx.fillText(`Atk: ${this.opponent.attack} Blk: ${this.opponent.block} `, (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 30, this.infoDimensions.infoSquareYOffset + 110 - this.heightOffset)\r\n            this.ctx.fillText(this.opponent.health, (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 90, this.infoDimensions.infoSquareYOffset + 75 - this.heightOffset)\r\n        }\r\n\r\n        this.ctx.fillText(\"Move\", (this.CANVAS_WIDTH - this.infoDimensions.infoSquareXOffset) + 65, this.infoDimensions.infoSquareYOffset + 150 - this.heightOffset)\r\n\r\n        this.ctx.fillText(\"Knight Health\", (this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen) + 21, this.infoDimensions.infoSquareYOffset + 40 - this.heightOffset)\r\n        this.ctx.fillText(`Atk: ${this.knight.attack} Blk: ${this.knight.block} `, (this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen) + 30, this.infoDimensions.infoSquareYOffset + 110 - this.heightOffset)\r\n        this.ctx.fillText(this.game.knight.health, (this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen) + 81, this.infoDimensions.infoSquareYOffset + 75 - this.heightOffset)\r\n        \r\n        let activeKnightStatus = []\r\n        for (let statusName in this.knight.status) {\r\n            if (statusName.slice(0, 2) === \"tt\" || statusName.slice(0, 2) === \"rr\") {\r\n                continue\r\n            }\r\n            if (this.knight.status[statusName]) {\r\n                activeKnightStatus.push(statusName)\r\n            }\r\n        }\r\n\r\n        let baseline = 160\r\n        if (activeKnightStatus.length) {\r\n            this.ctx.font = \"21px optima, sans-serif \"\r\n\r\n            this.ctx.fillText(\"Status\", (this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen) + 30, this.infoDimensions.infoSquareYOffset + 160 - this.heightOffset)\r\n            for (let i = 0; i < activeKnightStatus.length; i++) {\t\r\n                baseline += 30\r\n                let status = this.knight.status[\"rr\" + activeKnightStatus[i]]\r\n                this.ctx.fillText(`${status}`, (this.infoDimensions.infoSquareXOffset - this.infoDimensions.infoSquareLen) + 30, this.infoDimensions.infoSquareYOffset + baseline - this.heightOffset)\r\n\r\n            }\r\n        }\r\n\r\n\r\n        if (this.showDeckLength) {\r\n            this.ctx.fillText(`${this.knight.deck.length} cards left`, 825, 650 - this.heightOffset)\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(850, 660 - this.heightOffset);\r\n            this.ctx.lineTo(870, 680 - this.heightOffset);\r\n            this.ctx.lineTo(890, 660 - this.heightOffset);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n\r\n    renderCharacters(){\r\n        this.opponent.draw(this.ctx, this.gameFrame, this.staggerFrames, this.heightOffset)\r\n        this.knight.draw(this.ctx, this.gameFrame, this.staggerFrames, this.heightOffset)\r\n\r\n    }\r\n\r\n    endScreenAnimations() {\r\n        if (this.game.gameLoss && this.game.gameWin && !this.game.gameOver) {\r\n            this.staggerFrames = 30\r\n            this.game.gameOver = true\r\n            this.resetAnimationFrames()\r\n            this.knight.animationQueue.push(\"death\")\r\n            this.opponent.animationQueue.push(\"death\")\r\n            this.knight.animationQueue.push(\"dead\")\r\n            this.opponent.animationQueue.push(\"dead\")\r\n        }\r\n        if (this.game.gameLoss && !this.game.gameOver) {\r\n            this.staggerFrames = 30\r\n            this.game.gameOver = true\r\n            this.resetAnimationFrames()\r\n            this.knight.animationQueue.push(\"death\")\r\n            this.knight.animationQueue.push(\"dead\")\r\n        }\r\n        if (this.game.gameWin && !this.game.gameOver) {\r\n            this.staggerFrames = 30\r\n            this.game.gameOver = true\r\n            this.resetAnimationFrames()\r\n            this.opponent.animationQueue.push(\"death\")\r\n            this.opponent.animationQueue.push(\"dead\")\r\n        }\r\n    }\r\n\r\n    resetAnimationFrames() {\r\n        this.gameFrame = 0;\r\n    }\r\n\r\n    renderHoveredCard(cardIdObj) {\r\n        let card;\r\n        if (cardIdObj[\"knightCard\"]) {\r\n            card = this.knight.allUniqueCards[cardIdObj[\"knightCard\"]]\r\n        } else if (this.knight.status[\"blinded\"]) {\r\n            card = this.opponent.blindedCard\r\n        } else {\r\n            card = this.opponent.nextMove[0]\r\n        }\r\n        this.ctx.drawImage(card.art, (this.CANVAS_WIDTH / 2) - 195, (this.CANVAS_HEIGHT / 2) - 450 + this.heightOffset/2, 390, 600)\r\n    }\r\n\r\n    renderGameEndScreen() {\r\n        let text;\r\n        let sizeX;\r\n        let sizeY;\r\n        let posX;\r\n        let posY;\r\n\r\n        if (this.game.gameLoss) {\r\n            text = this.lossText\r\n            sizeX = 600; sizeY = 300; posX = 200; posY = 150 \r\n        } else {\r\n            text = this.winText\r\n            sizeX = 840; sizeY = 220; posX = 80; posY = 150\r\n        }\r\n        this.fadeOut += .01\r\n        this.ctx.fillStyle = `rgba(0,0,0,${this.fadeOut})`;\r\n        this.ctx.fillRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n        if (this.fadeOut > 1) {\r\n            this.textFadeIn -= .01\r\n            this.ctx.fillStyle = `rgba(0,0,0,${this.textFadeIn})`;\r\n            this.ctx.drawImage(text, posX, posY - this.heightOffset, sizeX, sizeY)\r\n            this.ctx.fillRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT)\r\n        }\r\n\r\n    }\r\n\r\n    setHeight(clientHeight) {\r\n        let height;\r\n        if (clientHeight > 950) {\r\n            height = this.MAX_HEIGHT\r\n            this.heightOffset = 0\r\n        } else if (clientHeight < 820) {\r\n            height = this.MIN_HEIGHT\r\n            this.heightOffset = 130\r\n        } else {\r\n            height = clientHeight - 244\r\n            this.heightOffset = 950 - clientHeight\r\n        }\r\n        this.crowd.updateYImmediate(this.heightOffset)\r\n        this.CANVAS_HEIGHT = this.canvas.height = height\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://jsproj/./src/gameView.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameView_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameView.js */ \"./src/gameView.js\");\n\n\nconst canvas = document.getElementById('canvas1')\nconst mat = document.getElementById('mat')\nlet clientHeight = document.documentElement.clientHeight\nconst gameview = new _gameView_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, clientHeight)\n\nmat.addEventListener(\"click\", (e) => {\n    if (!gameview.game.gameOver && !gameview.pauseInputs)  {\n        gameview.showNextHover = false\n        gameview.pauseInputs = true\n        let slot = e.target.parentNode\n        if (slot.className === \"card-slot\") {\n            let playerCardId = e.target.id\n            gameview.resetAnimationFrames()\n            gameview.game.coreGameLoop(playerCardId, slot.id)\n            gameview.hoveredCard = null\n            setTimeout(() => {\n                gameview.pauseInputs = false\n            }, 1500);\n        }\n    }\n});\n\nmat.addEventListener(\"mouseover\", (e) => {\n    let slot = e.target.parentNode\n    if (slot.className === \"card-slot\") {\n        let playerCardId = e.target.id\n        let card = gameview.knight.allUniqueCards[playerCardId]\n\n        gameview.knight.block = card.block.call(gameview.game)\n        gameview.knight.attack = gameview.knight.statusChecker.call(gameview.knight, card.attack.call(gameview.game), \"attack\")\n        gameview.hoveredCard = {knightCard: playerCardId}\n    }\n});\n\nmat.addEventListener(\"mouseout\", (e) => {\n    gameview.showNextHover = true\n    let slot = e.target.parentNode\n    if (slot.className === \"card-slot\") {\n        gameview.hoveredCard = null\n        if (!gameview.pauseInputs) {\n        gameview.knight.attack = 0\n        gameview.knight.block = 0\n        }\n    }\n});\n\ncanvas.addEventListener(\"mousemove\", (e) => {\n    let halfClientMargin = (document.documentElement.clientWidth - gameview.CANVAS_WIDTH)/2\n    if (gameview.gameStart === true) {\n        if (document.documentElement.clientWidth >= 1000) {\n            if (e.clientX > (718 + halfClientMargin) && e.clientX < (840 + halfClientMargin) && e.clientY > (375 - gameview.heightOffset) && e.clientY < (580 - gameview.heightOffset)){\n                gameview.showNextHover = true\n                if (gameview.knight.status[\"blinded\"]) {\n                    gameview.hoveredCard = gameview.opponent.blindedCard\n                } else {\n                    gameview.hoveredCard = { opponentCard: gameview.opponent.nextMove.id }\n                }\n            } else {\n                gameview.hoveredCard = null\n            }\n        }\n    }      \n});\n\nmat.addEventListener(\"mouseover\", (e) => {\n    let slot = e.target.parentNode\n    if (slot.id === \"deck-slot\") {\n        gameview.showDeckLength = true\n        gameview.showNextHover = false\n    }\n});\n\nmat.addEventListener(\"mouseout\", (e) => {\n    let slot = e.target.parentNode\n    if (slot.id === \"deck-slot\") {\n        gameview.showDeckLength = false\n        gameview.showNextHover = false\n    }\n});\n\naddEventListener(\"resize\", (e) => { \n    let clientHeight = document.documentElement.clientHeight\n    gameview.setHeight(clientHeight)\n});\n\n\ncanvas.addEventListener(\"click\", (e) => {\n    if (!gameview.gameStart || !gameview.playIntroAnimation) {\n        let halfClientMargin = (document.documentElement.clientWidth - gameview.CANVAS_WIDTH) / 2\n        if (e.clientX > (220 + halfClientMargin) && e.clientX < (400 + halfClientMargin) && e.clientY > 320 && e.clientY < 350) {\n            gameview.gameStart = true\n        } else if (e.clientX > (220 + halfClientMargin) && e.clientX < (425 + halfClientMargin) && e.clientY > 400 && e.clientY < 450) {\n            gameview.tutorialStart = true\n        }\n        if (gameview.tutorialStart) {\n            gameview.tutorial.tutorialSeq += 1\n            if (gameview.tutorial.tutorialSeq === 5) {\n                \n                gameview.playIntroAnimation = true\n                gameview.tutorialStart = false\n\n            }\n        }\n    } \n});\n\n//# sourceURL=webpack://jsproj/./src/index.js?");

/***/ }),

/***/ "./src/knight.js":
/*!***********************!*\
  !*** ./src/knight.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Knight)\n/* harmony export */ });\n/* harmony import */ var _combatant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combatant.js */ \"./src/combatant.js\");\n/* harmony import */ var _deck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deck.js */ \"./src/deck.js\");\n\n\n\nclass Knight extends _combatant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(){\n        super()\n        \n        this.image = new Image()\n        this.image.src = 'art/knight1/_Idle.png'\n        this.spriteWidth = 419.5;\n        this.spriteHeight = 280;\n        this.xPosition = -280\n        this.yPosition = 400\n        this.sizeCoef = 1\n\n        this.maxHealth = 30\n        this.health = this.maxHealth\n\n        this.deckObj = new _deck_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, 14)\n        this.deck = this.deckObj.stack\n        this.allUniqueCards = this.deckObj.allUniqueCards\n\n        this.animationStates = [\n        { name: \"idle\", frames: 10, src: 'art/knight1/_Idle.png' },\n        { name: \"attack\", frames: 5, src: 'art/knight1/_Attack.png' },\n        { name: \"attack2\", frames: 6, src: 'art/knight1/_Attack2nm.png' },\n        { name: \"combo\", frames: 10, src: 'art/knight1/_AttackCombonm.png' },\n        { name: \"death\", frames: 10, src: 'art/knight1/_Death.png' },\n        { name: \"dead\", frames: 1, src: 'art/knight1/_Dead.png' },\n        { name: \"roll\", frames: 12, src: 'art/knight1/_Roll.png' },\n        { name: \"duck\", frames: 3, src: 'art/knight1/_CrouchAll.png' },\n        { name: \"crouchAttack\", frames: 6, src: 'art/knight1/_CrouchAttack.png' },\n        { name: \"hit\", frames: 6, src: 'art/knight1/_Hit.png' },\n        { name: \"run\", frames: 10, src: 'art/knight1/_Run.png' },\n        ];\n\n        this.animationFramesSetter()\n\n        this.status = {\n            blinded: false,\n            ttblinded: 0,\n            rrblinded: \"Blinded\",\n            opponentPoiseBroken: false,\n            ttopponentPoiseBroken: 0,\n            rropponentPoiseBroken: \"Double damage\",\n            damageImmune: false,\n            ttdamageImmune: 0,\n            rrdamageImmune: \"Damage immune\"\n        }\n    }\n}\n\nKnight.prototype.statusChecker = function (unModValue, stat) {\n    switch (stat) {\n        case \"attack\":\n            if (this.status[\"opponentPoiseBroken\"]) return unModValue * 2\n        default:\n            return unModValue\n    }\n}\n\n\n\n\n\n//# sourceURL=webpack://jsproj/./src/knight.js?");

/***/ }),

/***/ "./src/opponent.js":
/*!*************************!*\
  !*** ./src/opponent.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Opponent)\n/* harmony export */ });\n/* harmony import */ var _combatant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combatant.js */ \"./src/combatant.js\");\n/* harmony import */ var _deck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deck.js */ \"./src/deck.js\");\n\n\n\nclass Opponent extends _combatant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() { \n        super()\n        this.image = new Image()\n        this.image.src = 'art/demon/_Idle.png'\n        this.spriteWidth = 500;\n        this.spriteHeight = 400;\n        this.sizeCoef = 1\n        this.xPosition = 300\n        this.yPosition = 319\n        this.animationTripper = -1\n        this.animationQueue = []\n\n        this.deckObj = new _deck_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, 100)\n        this.nextMove = this.deckObj.stack\n        this.allUniqueCards = this.deckObj.allUniqueCards\n\n        this.maxHealth = 30\n        this.health = this.maxHealth\n        this.attack = this.nextMove[0].attack.call(this)\n        this.block = this.nextMove[0].block.call(this)\n\n        this.animationStates = [\n        { name: \"idle\", frames: 6, src: 'art/demon/_Idle.png' },\n        { name: \"attack\", frames: 5, src: 'art/demon/_Attack.png' },\n        { name: \"attack2\", frames: 6, src: 'art/demon/_Attack2.png' },\n        { name: \"attack3\", frames: 6, src: 'art/demon/_Attack3.png' },\n        { name: \"hit\", frames: 3, src: 'art/demon/_Hit.png' },\n        { name: \"death\", frames: 4, src: 'art/demon/_Death.png' },\n        { name: \"dead\", frames: 1, src: 'art/demon/_Dead.png' },\n        { name: \"flash\", frames: 6, src: 'art/demon/_Flash.png' },\n        ];\n\n        this.animationFramesSetter()\n\n        this.blindedCard = { }\n        this.blindedCard[\"art\"] = new Image()\n        this.blindedCard.art.src = \"art/opponent_cards/mblinded.png\"\n\n        this.status = { }\n    }\n\n\n\n\n}\n\nOpponent.prototype.animation = function (aniStateName) {\n    this.animationState = aniStateName\n    this.image.src = this.animations[aniStateName].src\n    this.animationTripper = this.framesFinder(aniStateName)\n}\n\n\n\n\n\n\n\n//# sourceURL=webpack://jsproj/./src/opponent.js?");

/***/ }),

/***/ "./src/tutorial.js":
/*!*************************!*\
  !*** ./src/tutorial.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Tutorial)\n/* harmony export */ });\nclass Tutorial {\n    constructor(game, ctx, heightOffset) {\n        this.ctx = ctx\n        this.heightOffset = heightOffset\n        this.game = game\n        this.panelDrop = 0\n        this.knight = new Image()\n        this.knight.src = 'art/knight1/_Idle.png'\n        this.leading = 38\n        this.archibald = new Image()\n        this.archibald.src = 'art/knight1/archie.png'\n        this.playerCard = new Image()\n        this.playerCard.src = 'art/knight_cards/strike.png'\n        this.opponentCard = new Image()\n        this.opponentCard.src = 'art/knight_cards/reposition.png'\n        this.tutorialSeq = 0\n    }\n\n    renderTutorial() {\n        if (this.tutorialSeq === 1) {\n            this.renderTutorialPanel1()\n        } else if (this.tutorialSeq === 2) {\n            this.renderTutorialPanel2()\n        } else if (this.tutorialSeq === 3) {\n            this.renderTutorialPanel3()\n        } else if (this.tutorialSeq === 4) {\n            this.renderTutorialPanel4()\n        } \n    }\n\n    renderTutorialPanel1() {\n        let startLine = 140\n        this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\n        this.ctx.fillRect(150, 75, 650, this.panelDrop)\n        if (this.panelDrop < 400) this.panelDrop += 6.5\n        if (this.panelDrop >= 400) {\n            this.ctx.drawImage(this.knight, 0, 0, 419.5, 280, 275, 170, 419.5, 280 )\n            this.ctx.fillStyle = 'rgba(0,0,0,1)';\n            this.ctx.font = \"26px optima, sans-serif \"\n            this.ctx.fillText(\"You are\", 200, startLine, 2000, 200)\n            this.ctx.font = \"bold 26px optima, sans-serif \"\n            this.ctx.fillText(\"Solaire\", 293, startLine, 2000, 200)\n            this.ctx.font = \"26px optima, sans-serif \"\n            this.ctx.fillText(\", a stalwart knight seeking to\", 370, startLine, 2000, 200)\n            this.ctx.fillText(\"prove your worth against the mightiest champions\", 200, startLine += this.leading, 2000, 200)\n            this.ctx.fillText(\"of the land. You have come to the Queen\\’s \", 200, startLine += this.leading, 2000, 200)\n            this.ctx.fillText(\"tournament at Dragonstone Arena to battle for \", 200, startLine += this.leading, 2000, 200)\n            this.ctx.fillText(\"fame and fortune. \", 200, startLine += this.leading, 2000, 200)\n        }\n    }\n\n    renderTutorialPanel2() {\n        let startLine = 140\n        this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\n        this.ctx.fillRect(150, 75, 650, 400)\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.font = \"26px optima, sans-serif\"\n        this.ctx.fillText(\"Unfortunately, your first opponent is Sir Archibald,\", 200, startLine, 2000, 200)\n        this.ctx.fillText(\"a powerful and deadly knight.\", 200, startLine += this.leading, 2000, 200)\n        this.ctx.fillText(\"Defeat is pretty much certain.\", 200, startLine += (this.leading*2), 2000, 200)\n        this.ctx.drawImage(this.archibald, 0, 0, 120, 100, 235, 170, 120 * 3.5, 100 * 3.5)\n    }\n\n    renderTutorialPanel3() {\n        let startLine = 140\n        this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\n        this.ctx.fillRect(150, 75, 650, 500)\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.font = \"bold 26px optima, sans-serif\"\n        this.ctx.fillText(\"Core Mechanics\", 200, startLine, 2000, 200)\n        this.ctx.font = \"26px optima, sans-serif\"\n        this.ctx.fillText(\"The cards represent the moves you can make,\", 200, startLine += this.leading, 2000, 200)\n        this.ctx.fillText(\"click on a card to play it.\", 200, startLine += this.leading, 2000, 200)\n        this.ctx.fillText(\"Your opponent plays their cards at the same time.\", 200, startLine += this.leading, 2000, 200)\n        this.ctx.drawImage(this.playerCard, 340, 245, 130, 200)\n        this.ctx.drawImage(this.opponentCard, 480, 245, 130, 200)\n        this.ctx.fillText(\"To deal damage, your attack must be higher than\", 200, startLine += (this.leading * 2) + 140, 2000, 200)\n        this.ctx.fillText(\"your opponent\\’s block.\", 200, startLine += this.leading, 2000, 200)\n    }\n\n    renderTutorialPanel4() {\n        let startLine = 140\n        this.ctx.fillStyle = 'rgba(225,225,225,0.9)';\n        this.ctx.fillRect(150, 75, 650, 500)\n        this.ctx.fillStyle = 'rgba(0,0,0,1)';\n        this.ctx.font = \"bold 26px optima, sans-serif\"\n        this.ctx.fillText(\"Core Mechanics\", 200, startLine, 2000, 200)\n        this.ctx.font = \"26px optima, sans-serif\"\n        this.ctx.fillText(\"You draw a card whenever you deal damage.\", 200, startLine += this.leading, 2000, 200)\n        this.ctx.fillText(\"Watch out! You die if you run out of cards.\", 200, startLine += this.leading, 2000, 200)\n    }\n\n\n\n\n}\n\n//# sourceURL=webpack://jsproj/./src/tutorial.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;